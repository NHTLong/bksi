services:
    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_SERVER_ID: 1
        ports:
            - '2181:2181'
        networks:
            - app-network

    kafka-1:
        image: confluentinc/cp-kafka:latest
        ports:
            - '9092:9092'
            - '29092:29092'
        environment:
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_BROKER_ID: 1
        depends_on:
            - zookeeper
        networks:
            - app-network

    kafka-2:
        image: confluentinc/cp-kafka:latest
        ports:
            - '9093:9093'
            - '29093:29093'
        environment:
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_BROKER_ID: 2
        depends_on:
            - zookeeper
        networks:
            - app-network

    kafka-3:
        image: confluentinc/cp-kafka:latest
        ports:
            - '9094:9094'
            - '29094:29094'
        environment:
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_BROKER_ID: 3
        depends_on:
            - zookeeper
        networks:
            - app-network

    kafdrop1:
        image: obsidiandynamics/kafdrop
        ports:
            - '9000:9000'
        environment:
            KAFKA_BROKERCONNECT: kafka-1:19092,kafka-2:19093,kafka-3:19094
            JVM_OPTS: '-Xms32M -Xmx64M'
        networks:
            - app-network

    redis:
        image: redis
        container_name: redis-server
        ports:
            - '6379:6379'
        volumes:
            - redis-data:/data
        networks:
            - app-network

    mongodb:
        image: mongo:latest
        container_name: mongodb
        restart: always
        ports:
            - '27017:27017'
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: password
        volumes:
            - mongodb-data:/data/db
        networks:
            - app-network
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - '9090:9090'
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - prom-config:/etc/prometheus/targets
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--web.enable-lifecycle'
        networks:
            - app-network
    dashboard:
        build:
            context: .
            dockerfile: dashboard/Dockerfile
        container_name: dashboard
        ports:
            - '8080:8080'
        volumes:
            - prom-config:/etc/prometheus/targets
        user: root
        env_file:
            - ./dashboard/.env
        depends_on:
            - prometheus
        networks:
            - app-network

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - '3000:3000'
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
            - grafana_data:/var/lib/grafana
        depends_on:
            - prometheus
        networks:
            - app-network
    connect:
        image: quay.io/debezium/connect:2.5
        container_name: connect
        ports:
            - '8083:8083'
        environment:
            GROUP_ID: 1
            BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19093,kafka-3:19094
            CONFIG_STORAGE_TOPIC: connect_configs
            OFFSET_STORAGE_TOPIC: connect_offsets
            STATUS_STORAGE_TOPIC: connect_statuses
            CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
            CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
            CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'false'
            CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
            # Auto create connector
            CONNECT_CONNECTOR_CONFIGURATION: |
                {
                    "name": "mysql-connector",
                    "config": {
                        "connector.class": "io.debezium.connector.mysql.MySqlConnector",
                        "database.hostname": "127.0.0.1",
                        "database.port": "3306",
                        "database.user": "root",
                        "database.password": "12345678",
                        "database.server.id": "1",
                        "database.server.name": "uvdesk",
                        "database.include.list": "root",
                        "table.include.list": "root.uv_thread",
                        "database.history.kafka.bootstrap.servers": "kafka-1:19092,kafka-2:19093,kafka-3:19094",
                        "database.history.kafka.topic": "schema-changes.inventory",
                        "include.schema.changes": "true"
                    }
                }
        depends_on:
            - kafka-1
            - kafka-2
            - kafka-3
        networks:
            - app-network

    ticket-command:
        build:
            context: .
            dockerfile: ticket-command/Dockerfile
        container_name: ticket-command
        ports:
            - '9010:9010'
        user: root
        env_file:
            - ./ticket-command/.env
        depends_on:
            - kafka-1
            - kafka-2
            - kafka-3
            - connect
        networks:
            - app-network

    node-exporter:
        image: prom/node-exporter:latest
        container_name: node-exporter
        restart: unless-stopped
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        ports:
            - '9100:9100'
        networks:
            - app-network

    cadvisor:
        image: gcr.io/cadvisor/cadvisor:latest
        container_name: cadvisor
        restart: unless-stopped
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:ro
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /dev/disk/:/dev/disk:ro
        ports:
            - '8081:8080'
        networks:
            - app-network

    ai-demo:
        build:
            context: .
            dockerfile: ai-services/service-interface/Dockerfile
        container_name: AI-demo
        env_file:
            - ./ai-services/service-interface/.env
        ports:
            - '8120:8120'
        networks:
            - app-network

    mysql:
        image: mysql:8.0
        container_name: mysql-container
        environment:
            MYSQL_ROOT_PASSWORD: rootpassword
            MYSQL_DATABASE: mydatabase
            MYSQL_USER: myuser
            MYSQL_PASSWORD: mypassword
        ports:
            - '3308:3308'
        volumes:
            - mysql-data:/var/lib/mysql
        networks:
            - app-network

    management-module:
        build:
            context: .
            dockerfile: management/Dockerfile
        image: management-module:latest
        deploy:
            replicas: 1
            placement:
                constraints:
                    - node.role == manager
            restart_policy:
                condition: on-failure
                max_attempts: 3
            resources:
                limits:
                    cpus: '1'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M
            update_config:
                parallelism: 1
                delay: 10s
                order: start-first
            rollback_config:
                parallelism: 1
                delay: 10s
                order: stop-first
        ports:
            - target: 3200
              published: 3200
              protocol: tcp
              mode: host
        env_file:
            - ./management/.env
        volumes:
            - type: bind
              source: /var/run/docker.sock
              target: /var/run/docker.sock
              read_only: false
            - type: bind
              source: ./management/modules
              target: /app/modules
              read_only: true
        user: '1000:1000'
        cap_drop:
            - ALL
        cap_add:
            - NET_ADMIN
            - SYS_ADMIN
        security_opt:
            - no-new-privileges:true
            - seccomp:unconfined
            - apparmor:unconfined
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        networks:
            - app-network
        secrets:
            - source: jwt_secret
              target: /run/secrets/jwt_secret
              uid: '1000'
              gid: '1000'
              mode: 0400
        depends_on:
            - mysql

networks:
    app-network:
        driver: bridge

volumes:
    redis-data:
    mongodb-data:
        driver: local
    prometheus_data:
        driver: local
    grafana_data:
    prom-config:
        driver: local
    mysql-data:
