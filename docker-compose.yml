services:
    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_SERVER_ID: 1
        ports:
            - '2181:2181'
        networks:
            - app-network

    kafka-1:
        image: confluentinc/cp-kafka:latest
        ports:
            - '9092:9092'
            - '29092:29092'
        environment:
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_BROKER_ID: 1
        depends_on:
            - zookeeper
        networks:
            - app-network

    kafka-2:
        image: confluentinc/cp-kafka:latest
        ports:
            - '9093:9093'
            - '29093:29093'
        environment:
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_BROKER_ID: 2
        depends_on:
            - zookeeper
        networks:
            - app-network

    kafka-3:
        image: confluentinc/cp-kafka:latest
        ports:
            - '9094:9094'
            - '29094:29094'
        environment:
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_BROKER_ID: 3
        depends_on:
            - zookeeper
        networks:
            - app-network

    kafdrop1:
        image: obsidiandynamics/kafdrop
        ports:
            - '9000:9000'
        environment:
            KAFKA_BROKERCONNECT: kafka-1:19092,kafka-2:19093,kafka-3:19094
            JVM_OPTS: '-Xms32M -Xmx64M'
        networks:
            - app-network

    redis:
        image: redis
        container_name: redis-server
        ports:
            - '6379:6379'
        volumes:
            - redis-data:/data
        networks:
            - app-network

    mongodb:
        image: mongo:latest
        container_name: mongodb
        restart: always
        ports:
            - '27017:27017'
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: password
        volumes:
            - mongodb-data:/data/db
        networks:
            - app-network
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - '9090:9090'
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml
            - prom-config:/etc/prometheus/targets
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--web.enable-lifecycle'
        networks:
            - app-network
    alertmanager:
        image: prom/alertmanager
        container_name: alertmanager
        ports:
            - '9095:9095'
        volumes:
            - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
        command:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
        restart: always
        networks:
            - app-network

    healthcheck:
        build:
            context: .
            dockerfile: healthcheck/Dockerfile
        container_name: healthcheck
        ports:
            - '8001:8001'
        user: root
        env_file:
            - ./healthcheck/.env
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M
        networks:
            - app-network
    dashboard:
        build:
            context: .
            dockerfile: dashboard/Dockerfile
        container_name: dashboard
        environment:
            - PYTHONUNBUFFERED=1
        ports:
            - '8081:8081'
        volumes:
            - prom-config:/etc/prometheus/targets
        user: root
        env_file:
            - ./dashboard/.env
        depends_on:
            - kafka-1
            - kafka-2
            - kafka-3
            - mongodb
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 3G
                reservations:
                    cpus: '0.5'
                    memory: 512M
        networks:
            - app-network

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - '3000:3000'
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
            - grafana_data:/var/lib/grafana
        depends_on:
            - prometheus
        networks:
            - app-network
    connect:
        image: quay.io/debezium/connect:3.1
        container_name: connect
        ports:
            - '8083:8083'
        environment:
            GROUP_ID: 1
            BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19093,kafka-3:19094
            CONFIG_STORAGE_TOPIC: connect_configs
            OFFSET_STORAGE_TOPIC: connect_offsets
            STATUS_STORAGE_TOPIC: connect_statuses
            CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
            CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
            CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'false'
            CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
            # Auto create connector
            CONNECT_CONNECTOR_CONFIGURATION: |
                {
                    "name": "mysql-connector",
                    "config": {
                        "connector.class": "io.debezium.connector.mysql.MySqlConnector",
                        "database.hostname": "127.0.0.1",
                        "database.port": "3306",
                        "database.user": "root",
                        "database.password": "12345678",
                        "database.server.id": "1",
                        "database.server.name": "uvdesk",
                        "database.include.list": "root",
                        "table.include.list": "root.uv_thread",
                        "database.history.kafka.bootstrap.servers": "kafka-1:19092,kafka-2:19093,kafka-3:19094",
                        "database.history.kafka.topic": "schema-changes.inventory",
                        "include.schema.changes": "true"
                    }
                }
        depends_on:
            - kafka-1
            - kafka-2
            - kafka-3
        networks:
            - app-network
    ticket-service:
        build:
            context: .
            dockerfile: ticket/Dockerfile
        container_name: ticket-service
        ports:
            - '8080:8080'
        user: root
        env_file:
            - ./ticket/.env
        depends_on:
            - kafka-1
            - kafka-2
            - kafka-3
            - connect
            - mongodb
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 5G
                reservations:
                    cpus: '1'
                    memory: 2G
        networks:
            - app-network
    # ai-demo:
    #     build:
    #         context: .
    #         dockerfile: ai-services/service-interface/Dockerfile
    #     container_name: AI-demo
    #     env_file:
    #         - ./ai-services/service-interface/.env
    #     ports:
    #         - '8120:8120'
    #     networks:
    #         - app-network
    management-module:
        build:
            context: .
            dockerfile: management/Dockerfile
        ports:
            - '3200:3200'
        env_file:
            - ./management/.env
        user: '1000:1000' # Run as non-root user
        depends_on:
            - kafka-1
            - kafka-2
            - kafka-3
            - mongodb
        cap_drop:
            - ALL # Drop all capabilities
        cap_add:
            - NET_ADMIN # Add only required capabilities
        security_opt:
            - no-new-privileges:true
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M
        networks:
            - app-network

    report-service:
        build:
            context: .
            dockerfile: report/Dockerfile
        ports:
            - '5000:5000'
        environment:
            - MONGO_URI=mongodb://admin:password@mongodb:27017/feedback_db?authSource=admin
            - FLASK_ENV=production
            - FLASK_APP=main.py
        depends_on:
            - mongodb
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M
        networks:
            - app-network
        restart: always

    api-gateway:
        build:
            context: .
            dockerfile: gateway/Dockerfile
        container_name: api-gateway
        ports:
            - '8210:8210'
        env_file:
            - ./gateway/.env
        security_opt:
            - no-new-privileges:true
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 5G
                reservations:
                    cpus: '2'
                    memory: 2G
        networks:
            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    redis-data:
    mongodb-data:
        driver: local
    prometheus_data:
        driver: local
    grafana_data:
    prom-config:
        driver: local
